!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!C++	name	/aliased names/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!C++	c,class	/classes/
!_TAG_KIND_DESCRIPTION!C++	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C++	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C++	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C++	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C++	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C++	m,member	/class, struct, and union members/
!_TAG_KIND_DESCRIPTION!C++	n,namespace	/namespaces/
!_TAG_KIND_DESCRIPTION!C++	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C++	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C++	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C++	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!Make	I,makefile	/makefiles/
!_TAG_KIND_DESCRIPTION!Make	m,macro	/macros/
!_TAG_KIND_DESCRIPTION!Make	t,target	/targets/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!C++	1.1	/current.age/
!_TAG_PARSER_VERSION!Make	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/fuck/Projects/cppGeneral/portedTree/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.1.0	/v6.1.0/
!_TAG_ROLE_DESCRIPTION!C++!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C++!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C++!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!Make!makefile	included	/included/
!_TAG_ROLE_DESCRIPTION!Make!makefile	optional	/optionally included/
$(BUILD_DIR)	makefile	/^$(BUILD_DIR):$/;"	t
$(BUILD_DIR)/%.d	makefile	/^$(BUILD_DIR)\/%.d: $(SRC_DIR)\/%.cpp | $(BUILD_DIR)$/;"	t
$(BUILD_DIR)/%.d	makefile	/^$(BUILD_DIR)\/%.d: $(TEST_DIR)\/%.cpp | $(BUILD_DIR)$/;"	t
$(BUILD_DIR)/%.o	makefile	/^$(BUILD_DIR)\/%.o: $(SRC_DIR)\/%.cpp | $(BUILD_DIR)$/;"	t
$(BUILD_DIR)/%.o	makefile	/^$(BUILD_DIR)\/%.o: $(TEST_DIR)\/%.cpp | $(BUILD_DIR)$/;"	t
$(EXECUTABLE)	makefile	/^$(EXECUTABLE): $(OBJECTS)$/;"	t
$(TEST_EXECUTABLE)	makefile	/^$(TEST_EXECUTABLE): $(filter-out $(BUILD_DIR)\/main.o, $(OBJECTS)) $(TEST_OBJECTS)$/;"	t
BUILD_DIR	makefile	/^BUILD_DIR := build$/;"	m
CONSTANTS_HPP	include/constants.hpp	/^#define CONSTANTS_HPP$/;"	d
CXX	makefile	/^CXX := g++$/;"	m
Constants	include/constants.hpp	/^namespace Constants {$/;"	n
DEBUG	include/debug.hpp	/^	DEBUG,$/;"	e	enum:LogLevel
DEBUG_ALL	include/debug.hpp	/^#define DEBUG_ALL$/;"	d
DEBUG_HPP	include/debug.hpp	/^#define DEBUG_HPP$/;"	d
ERROR	include/debug.hpp	/^	ERROR$/;"	e	enum:LogLevel
EXECUTABLE	makefile	/^EXECUTABLE := nbody_simulation$/;"	m
G	include/constants.hpp	/^    constexpr double G = 0.001;$/;"	v	namespace:Constants	typeref:typename:double
G	src/main.cpp	/^    double G;$/;"	m	struct:arguments	typeref:typename:double	file:
INCLUDE_DIR	makefile	/^INCLUDE_DIR := include$/;"	m
INFO	include/debug.hpp	/^	INFO,$/;"	e	enum:LogLevel
LDFLAGS	makefile	/^LDFLAGS := -lSDL2 -fopenmp$/;"	m
LOG_DEBUG	include/debug.hpp	/^    #define LOG_DEBUG(/;"	d
LOG_ERROR	include/debug.hpp	/^    #define LOG_ERROR(/;"	d
LOG_INFO	include/debug.hpp	/^    #define LOG_INFO(/;"	d
LOG_WARNING	include/debug.hpp	/^    #define LOG_WARNING(/;"	d
LogLevel	include/debug.hpp	/^enum class LogLevel {$/;"	g
Logger	include/debug.hpp	/^class Logger {$/;"	c
MAX_POINTS	include/constants.hpp	/^    constexpr int MAX_POINTS = 500;$/;"	v	namespace:Constants	typeref:typename:int
Node	include/quadtree.hpp	/^		Node(int x, int y, int width, int height) : x(x), y(y), width(width), height(height) {};$/;"	f	class:Node
Node	include/quadtree.hpp	/^class Node{$/;"	c
OBJECTS	makefile	/^OBJECTS := $(SOURCES:$(SRC_DIR)\/%.cpp=$(BUILD_DIR)\/%.o)$/;"	m
POINT_HPP	include/point.hpp	/^#define POINT_HPP$/;"	d
PROFILE_REPORT	include/debug.hpp	/^		#define PROFILE_REPORT(/;"	d
PROFILE_START	include/debug.hpp	/^		#define PROFILE_START(/;"	d
PROFILE_STOP	include/debug.hpp	/^		#define PROFILE_STOP(/;"	d
Point	include/point.hpp	/^class Point {$/;"	c
Point	src/point.cpp	/^Point::Point(double x, double y, double vx, double vy, double mass, double fx, double fy, int r,/;"	f	class:Point
Profiler	include/debug.hpp	/^class Profiler {$/;"	c
QUADTREE_HPP	include/quadtree.hpp	/^#define QUADTREE_HPP$/;"	d
QuadTree	include/quadtree.hpp	/^class QuadTree{$/;"	c
QuadTree	src/quadtree.cpp	/^QuadTree::QuadTree(const Node& boundary, int depth) : boundary(boundary), depth(depth), divided(/;"	f	class:QuadTree
QuadTreeTest	test/quadtree_test.cpp	/^class QuadTreeTest:public::testing::Test{$/;"	c	file:
RENDERER_HPP	include/render.hpp	/^#define RENDERER_HPP$/;"	d
Renderer	include/render.hpp	/^class Renderer{$/;"	c
Renderer	src/render.cpp	/^Renderer::Renderer (int width, int height){$/;"	f	class:Renderer
SIMULATION_HPP	include/simulation.hpp	/^#define SIMULATION_HPP$/;"	d
SOURCES	makefile	/^SOURCES := $(wildcard $(SRC_DIR)\/*.cpp)$/;"	m
SRC_DIR	makefile	/^SRC_DIR := src$/;"	m
SetUp	test/quadtree_test.cpp	/^		void SetUp() override{$/;"	f	class:QuadTreeTest	typeref:typename:void	file:
Simulation	include/simulation.hpp	/^class Simulation {$/;"	c
Simulation	src/simulation.cpp	/^Simulation::Simulation(int width, int height, int numPoints) : root(std::make_unique<QuadTree>(N/;"	f	class:Simulation
TEST_DIR	makefile	/^TEST_DIR := test$/;"	m
TEST_EXECUTABLE	makefile	/^TEST_EXECUTABLE := run_tests$/;"	m
TEST_F	test/quadtree_test.cpp	/^TEST_F(QuadTreeTest, ForceCalculationTest) {$/;"	f
TEST_F	test/quadtree_test.cpp	/^TEST_F(QuadTreeTest, InsertPointInBounds) {$/;"	f
TEST_F	test/quadtree_test.cpp	/^TEST_F(QuadTreeTest, InsertPointOutOfBounds) {$/;"	f
TEST_F	test/quadtree_test.cpp	/^TEST_F(QuadTreeTest, MassDistributionTest) {$/;"	f
TEST_F	test/quadtree_test.cpp	/^TEST_F(QuadTreeTest, SubdivideTest) {$/;"	f
TEST_OBJECTS	makefile	/^TEST_OBJECTS := $(TEST_SOURCES:$(TEST_DIR)\/%.cpp=$(BUILD_DIR)\/%.o)$/;"	m
TEST_SOURCES	makefile	/^TEST_SOURCES := $(wildcard $(TEST_DIR)\/*.cpp)$/;"	m
WARNING	include/debug.hpp	/^	WARNING,$/;"	e	enum:LogLevel
__anone3fdfb520102	src/simulation.cpp	/^  points.erase(std::remove_if(points.begin(), points.end(), [this](const std::shared_ptr<Point>&/;"	f	function:Simulation::update	file:
accumulator	include/simulation.hpp	/^        double accumulator = 0.0;$/;"	m	class:Simulation	typeref:typename:double
addGalaxy	src/simulation.cpp	/^void Simulation::addGalaxy(double centreX, double centreY, double vx, double vy, double blackHol/;"	f	class:Simulation	typeref:typename:void
all	makefile	/^all: $(EXECUTABLE)$/;"	t
argp	src/main.cpp	/^static struct argp argp = { options, parse_opt, 0, 0 };$/;"	v	typeref:struct:argp	file:
arguments	src/main.cpp	/^struct arguments {$/;"	s	file:
boundary	include/quadtree.hpp	/^		Node boundary;$/;"	m	class:QuadTree	typeref:typename:Node
calcforce	src/quadtree.cpp	/^double QuadTree::calcforce(Point &p, double theta) const{$/;"	f	class:QuadTree	typeref:typename:double
callCounts	include/debug.hpp	/^    static std::map<std::string, int> callCounts;$/;"	m	class:Profiler	typeref:typename:std::map<std::string,int>
callCounts	src/debug.cpp	/^std::map<std::string, int> Profiler::callCounts;$/;"	m	class:Profiler	typeref:typename:std::map<std::string,int>
clean	makefile	/^clean:$/;"	t
clear	src/quadtree.cpp	/^int QuadTree::clear(){$/;"	f	class:QuadTree	typeref:typename:int
clear	src/render.cpp	/^int Renderer::clear(){$/;"	f	class:Renderer	typeref:typename:int
close	src/debug.cpp	/^void Logger::close(){$/;"	f	class:Logger	typeref:typename:void
contains	include/quadtree.hpp	/^		bool contains(const Point& point) const {$/;"	f	class:Node	typeref:typename:bool
currentLogLevel	include/debug.hpp	/^		static LogLevel currentLogLevel;$/;"	m	class:Logger	typeref:typename:LogLevel
currentLogLevel	src/debug.cpp	/^LogLevel Logger::currentLogLevel = LogLevel::DEBUG;$/;"	m	class:Logger	typeref:typename:LogLevel
data	include/point.hpp	/^		__m256d data;  \/\/ x, y, vx, vy,$/;"	m	class:Point	typeref:typename:__m256d
data2	include/point.hpp	/^		__m256d data2; \/\/ Fx, Fy, mass, 0$/;"	m	class:Point	typeref:typename:__m256d
defaultNumPoints	include/constants.hpp	/^    constexpr int defaultNumPoints = 2000;$/;"	v	namespace:Constants	typeref:typename:int
delta	include/constants.hpp	/^    constexpr double delta = 0.03;$/;"	v	namespace:Constants	typeref:typename:double
delta	src/main.cpp	/^    double delta;$/;"	m	struct:arguments	typeref:typename:double	file:
depth	include/quadtree.hpp	/^		int depth;$/;"	m	class:QuadTree	typeref:typename:int
divided	include/quadtree.hpp	/^		bool divided;$/;"	m	class:QuadTree	typeref:typename:bool
drawPoint	src/render.cpp	/^int Renderer::drawPoint(const Point& p) {$/;"	f	class:Renderer	typeref:typename:int
drawQuadTree	src/render.cpp	/^int Renderer::drawQuadTree(const QuadTree &node)$/;"	f	class:Renderer	typeref:typename:int
dt	include/constants.hpp	/^    constexpr double dt = 0.000005;$/;"	v	namespace:Constants	typeref:typename:double
dt	src/main.cpp	/^    double dt;$/;"	m	struct:arguments	typeref:typename:double	file:
fixedDt	include/simulation.hpp	/^        const double fixedDt = 1.0 \/ 60.0;  \/\/ 60 updates per second$/;"	m	class:Simulation	typeref:typename:const double
getB	include/point.hpp	/^		int getB() const {return m_b ;};$/;"	f	class:Point	typeref:typename:int
getCentreMassX	include/quadtree.hpp	/^		double getCentreMassX() const {return m_centreMassX;};$/;"	f	class:QuadTree	typeref:typename:double
getCentreMassY	include/quadtree.hpp	/^		double getCentreMassY() const {return m_centreMassY;};$/;"	f	class:QuadTree	typeref:typename:double
getFx	include/point.hpp	/^		double getFx() const {return m_fx;};$/;"	f	class:Point	typeref:typename:double
getFy	include/point.hpp	/^		double getFy() const {return m_fy;};$/;"	f	class:Point	typeref:typename:double
getG	include/point.hpp	/^		int getG() const {return m_g ;};$/;"	f	class:Point	typeref:typename:int
getMass	include/point.hpp	/^		double getMass() const {return m_mass;};$/;"	f	class:Point	typeref:typename:double
getPoints	include/quadtree.hpp	/^		const std::vector<std::shared_ptr<Point>>& getPoints() const {return m_points;};$/;"	f	class:QuadTree	typeref:typename:const std::vector<std::shared_ptr<Point>> &
getR	include/point.hpp	/^		int getR() const {return m_r ;};$/;"	f	class:Point	typeref:typename:int
getTotalMass	include/quadtree.hpp	/^		double getTotalMass() const {return m_totalmass;};$/;"	f	class:QuadTree	typeref:typename:double
getVx	include/point.hpp	/^		double getVx() const {return m_vx;};$/;"	f	class:Point	typeref:typename:double
getVy	include/point.hpp	/^		double getVy() const {return m_y;};$/;"	f	class:Point	typeref:typename:double
getX	include/point.hpp	/^		double getX() const {return m_x;};$/;"	f	class:Point	typeref:typename:double
getY	include/point.hpp	/^		double getY() const {return m_y;};$/;"	f	class:Point	typeref:typename:double
handleEvent	src/render.cpp	/^void Renderer::handleEvent(bool &quit, const SDL_Event& event) {$/;"	f	class:Renderer	typeref:typename:void
height	include/constants.hpp	/^    constexpr int height = 768;$/;"	v	namespace:Constants	typeref:typename:int
height	include/quadtree.hpp	/^		int x, y, width, height;$/;"	m	class:Node	typeref:typename:int
height	src/main.cpp	/^    int height;$/;"	m	struct:arguments	typeref:typename:int	file:
init	src/debug.cpp	/^void Logger::init(const std::string& filename){$/;"	f	class:Logger	typeref:typename:void
insert	src/quadtree.cpp	/^bool QuadTree::insert(std::shared_ptr<Point> p){$/;"	f	class:QuadTree	typeref:typename:bool
log	src/debug.cpp	/^void Logger::log(LogLevel level, const char* file, int line, const char* func, const char* forma/;"	f	class:Logger	typeref:typename:void
logFile	include/debug.hpp	/^		static std::ofstream logFile;$/;"	m	class:Logger	typeref:typename:std::ofstream
logFile	src/debug.cpp	/^std::ofstream Logger::logFile;$/;"	m	class:Logger	typeref:typename:std::ofstream
logLevelStrings	include/debug.hpp	/^		static const char* logLevelStrings[];$/;"	m	class:Logger	typeref:typename:const char * []
logLevelStrings	src/debug.cpp	/^const char* Logger::logLevelStrings[] = {"DEBUG", "INFO", "WARNING", "ERROR"};$/;"	m	class:Logger	typeref:typename:const char * []
logMemoryUsage	src/debug.cpp	/^void Logger::logMemoryUsage() {$/;"	f	class:Logger	typeref:typename:void
logPoint	src/debug.cpp	/^void Logger::logPoint(const std::string& prefix, double x, double y) {$/;"	f	class:Logger	typeref:typename:void
logQuadTree	src/debug.cpp	/^void Logger::logQuadTree(const std::string& prefix, double x, double y, double width, double hei/;"	f	class:Logger	typeref:typename:void
mD	include/point.hpp	/^#define mD /;"	d
m_b	include/point.hpp	/^		int m_r,m_g,m_b;$/;"	m	class:Point	typeref:typename:int
m_centreMassX	include/quadtree.hpp	/^		double m_centreMassX, m_centreMassY;$/;"	m	class:QuadTree	typeref:typename:double
m_centreMassY	include/quadtree.hpp	/^		double m_centreMassX, m_centreMassY;$/;"	m	class:QuadTree	typeref:typename:double
m_child	include/quadtree.hpp	/^		std::array<std::unique_ptr<QuadTree>, 4> m_child;$/;"	m	class:QuadTree	typeref:typename:std::array<std::unique_ptr<QuadTree>,4>
m_fx	include/point.hpp	/^		double m_fx, m_fy;$/;"	m	class:Point	typeref:typename:double
m_fy	include/point.hpp	/^		double m_fx, m_fy;$/;"	m	class:Point	typeref:typename:double
m_g	include/point.hpp	/^		int m_r,m_g,m_b;$/;"	m	class:Point	typeref:typename:int
m_mass	include/point.hpp	/^		double m_mass;$/;"	m	class:Point	typeref:typename:double
m_points	include/quadtree.hpp	/^		std::vector<std::shared_ptr<Point>> m_points;$/;"	m	class:QuadTree	typeref:typename:std::vector<std::shared_ptr<Point>>
m_r	include/point.hpp	/^		int m_r,m_g,m_b;$/;"	m	class:Point	typeref:typename:int
m_showGrid	include/render.hpp	/^		bool m_showGrid = false;$/;"	m	class:Renderer	typeref:typename:bool
m_totalmass	include/quadtree.hpp	/^		double m_totalmass;$/;"	m	class:QuadTree	typeref:typename:double
m_vx	include/point.hpp	/^		double m_vx, m_vy;$/;"	m	class:Point	typeref:typename:double
m_vy	include/point.hpp	/^		double m_vx, m_vy;$/;"	m	class:Point	typeref:typename:double
m_x	include/point.hpp	/^		double m_x, m_y;$/;"	m	class:Point	typeref:typename:double
m_y	include/point.hpp	/^		double m_x, m_y;$/;"	m	class:Point	typeref:typename:double
main	src/main.cpp	/^int main(int argc, char* argv[]){$/;"	f	typeref:typename:int
main	test/quadtree_test.cpp	/^int main(int argc, char **argv) {$/;"	f	typeref:typename:int
numPoints	src/main.cpp	/^    int numPoints;$/;"	m	struct:arguments	typeref:typename:int	file:
options	src/main.cpp	/^static struct argp_option options[] = {$/;"	v	typeref:struct:argp_option[]	file:
parse_opt	src/main.cpp	/^static error_t parse_opt(int key, char *arg, struct argp_state *state) {$/;"	f	typeref:typename:error_t	file:
points	include/simulation.hpp	/^        std::vector<std::shared_ptr<Point>> points;$/;"	m	class:Simulation	typeref:typename:std::vector<std::shared_ptr<Point>>
present	src/render.cpp	/^int Renderer::present(){$/;"	f	class:Renderer	typeref:typename:int
printQuadTree	src/simulation.cpp	/^void printQuadTree(QuadTree *qt, int depth = 0){$/;"	f	typeref:typename:void
quadTreeDepth	include/constants.hpp	/^    constexpr int quadTreeDepth = 5;$/;"	v	namespace:Constants	typeref:typename:int
render	src/simulation.cpp	/^void Simulation::render(){$/;"	f	class:Simulation	typeref:typename:void
renderer	include/render.hpp	/^		SDL_Renderer* renderer;$/;"	m	class:Renderer	typeref:typename:SDL_Renderer *
renderer	include/simulation.hpp	/^        std::unique_ptr<Renderer> renderer;$/;"	m	class:Simulation	typeref:typename:std::unique_ptr<Renderer>
report	src/debug.cpp	/^void Profiler::report() {$/;"	f	class:Profiler	typeref:typename:void
root	include/simulation.hpp	/^        std::unique_ptr<QuadTree> root;$/;"	m	class:Simulation	typeref:typename:std::unique_ptr<QuadTree>
root	test/quadtree_test.cpp	/^		std::unique_ptr<QuadTree> root;$/;"	m	class:QuadTreeTest	typeref:typename:std::unique_ptr<QuadTree>	file:
run	src/simulation.cpp	/^void Simulation::run(){$/;"	f	class:Simulation	typeref:typename:void
setB	include/point.hpp	/^		void setB(int b) {m_b = b;};$/;"	f	class:Point	typeref:typename:void
setFx	include/point.hpp	/^		void setFx(double fx) {m_fx = fx;};$/;"	f	class:Point	typeref:typename:void
setFy	include/point.hpp	/^		void setFy(double fy) {m_fy = fy;};$/;"	f	class:Point	typeref:typename:void
setG	include/point.hpp	/^		void setG(int g) {m_g = g;};$/;"	f	class:Point	typeref:typename:void
setLogLevel	src/debug.cpp	/^void Logger::setLogLevel(LogLevel level){$/;"	f	class:Logger	typeref:typename:void
setMass	include/point.hpp	/^		void setMass(double mass) {m_mass = mass;};$/;"	f	class:Point	typeref:typename:void
setR	include/point.hpp	/^		void setR(int r) {m_r = r;};$/;"	f	class:Point	typeref:typename:void
setVx	include/point.hpp	/^		void setVx(double vx) {m_vx = vx;};$/;"	f	class:Point	typeref:typename:void
setVy	include/point.hpp	/^		void setVy(double vy) {m_vy = vy;};$/;"	f	class:Point	typeref:typename:void
setX	include/point.hpp	/^		void setX(double x) {m_x = x;};$/;"	f	class:Point	typeref:typename:void
setY	include/point.hpp	/^		void setY(double y) {m_y = y;};$/;"	f	class:Point	typeref:typename:void
start	src/debug.cpp	/^void Profiler::start(const std::string& section) {$/;"	f	class:Profiler	typeref:typename:void
startTime	include/debug.hpp	/^		static std::chrono::system_clock::time_point startTime;$/;"	m	class:Logger	typeref:typename:std::chrono::system_clock::time_point
startTime	src/debug.cpp	/^std::chrono::system_clock::time_point Logger::startTime;$/;"	m	class:Logger	typeref:typename:std::chrono::system_clock::time_point
startTimes	include/debug.hpp	/^    static std::map<std::string, std::chrono::high_resolution_clock::time_point> startTimes;$/;"	m	class:Profiler	typeref:typename:std::map<std::string,std::chrono::high_resolution_clock::time_point>
startTimes	src/debug.cpp	/^std::map<std::string, std::chrono::high_resolution_clock::time_point> Profiler::startTimes;$/;"	m	class:Profiler	typeref:typename:std::map<std::string,std::chrono::high_resolution_clock::time_point>
stop	src/debug.cpp	/^void Profiler::stop(const std::string& section) {$/;"	f	class:Profiler	typeref:typename:void
subdivide	src/quadtree.cpp	/^bool QuadTree::subdivide(){$/;"	f	class:QuadTree	typeref:typename:bool
test	makefile	/^test: $(TEST_EXECUTABLE)$/;"	t
toggleGrid	src/render.cpp	/^void Renderer::toggleGrid() {$/;"	f	class:Renderer	typeref:typename:void
totalTimes	include/debug.hpp	/^    static std::map<std::string, double> totalTimes;$/;"	m	class:Profiler	typeref:typename:std::map<std::string,double>
totalTimes	src/debug.cpp	/^std::map<std::string, double> Profiler::totalTimes;$/;"	m	class:Profiler	typeref:typename:std::map<std::string,double>
update	src/simulation.cpp	/^void Simulation::update(){$/;"	f	class:Simulation	typeref:typename:void
updateMassDistribution	src/quadtree.cpp	/^void QuadTree::updateMassDistribution(const std::shared_ptr<Point>& p) {$/;"	f	class:QuadTree	typeref:typename:void
updatePosition	src/point.cpp	/^bool Point::updatePosition(double dt, double width, double height){$/;"	f	class:Point	typeref:typename:bool
updateVelocity	src/point.cpp	/^int Point::updateVelocity(double dt){$/;"	f	class:Point	typeref:typename:int
width	include/constants.hpp	/^    constexpr int width = 1366;$/;"	v	namespace:Constants	typeref:typename:int
width	include/quadtree.hpp	/^		int x, y, width, height;$/;"	m	class:Node	typeref:typename:int
width	src/main.cpp	/^    int width;$/;"	m	struct:arguments	typeref:typename:int	file:
window	include/render.hpp	/^		SDL_Window* window;$/;"	m	class:Renderer	typeref:typename:SDL_Window *
x	include/quadtree.hpp	/^		int x, y, width, height;$/;"	m	class:Node	typeref:typename:int
y	include/quadtree.hpp	/^		int x, y, width, height;$/;"	m	class:Node	typeref:typename:int
~Renderer	src/render.cpp	/^Renderer::~Renderer(){$/;"	f	class:Renderer
